package HadithOntology;

import HadithOntology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: HadithFactory<br>
 * @version generated on Sun Jan 09 12:58:42 PKT 2022 by amna
 */
public class HadithFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public HadithFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public HadithFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Person
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }
    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Believer
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Believer", Believer.class, DefaultBeliever.class);
    }

    /**
     * Creates an instance of type Believer.  Modifies the underlying ontology.
     */
    public Believer createBeliever(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BELIEVER, DefaultBeliever.class);
    }

    /**
     * Gets an instance of type Believer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Believer getBeliever(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BELIEVER, DefaultBeliever.class);
    }

    /**
     * Gets all instances of Believer from the ontology.
     */
    public Collection<? extends Believer> getAllBelieverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BELIEVER, DefaultBeliever.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Companion
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Companion", Companion.class, DefaultCompanion.class);
    }

    /**
     * Creates an instance of type Companion.  Modifies the underlying ontology.
     */
    public Companion createCompanion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPANION, DefaultCompanion.class);
    }

    /**
     * Gets an instance of type Companion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Companion getCompanion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPANION, DefaultCompanion.class);
    }

    /**
     * Gets all instances of Companion from the ontology.
     */
    public Collection<? extends Companion> getAllCompanionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPANION, DefaultCompanion.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Elevated_Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Elevated_Hadith", Elevated_Hadith.class, DefaultElevated_Hadith.class);
    }

    /**
     * Creates an instance of type Elevated_Hadith.  Modifies the underlying ontology.
     */
    public Elevated_Hadith createElevated_Hadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELEVATED_HADITH, DefaultElevated_Hadith.class);
    }

    /**
     * Gets an instance of type Elevated_Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Elevated_Hadith getElevated_Hadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELEVATED_HADITH, DefaultElevated_Hadith.class);
    }

    /**
     * Gets all instances of Elevated_Hadith from the ontology.
     */
    public Collection<? extends Elevated_Hadith> getAllElevated_HadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELEVATED_HADITH, DefaultElevated_Hadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Hadith", Hadith.class, DefaultHadith.class);
    }

    /**
     * Creates an instance of type Hadith.  Modifies the underlying ontology.
     */
    public Hadith createHadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }

    /**
     * Gets an instance of type Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hadith getHadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }

    /**
     * Gets all instances of Hadith from the ontology.
     */
    public Collection<? extends Hadith> getAllHadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithBook
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithBook", HadithBook.class, DefaultHadithBook.class);
    }

    /**
     * Creates an instance of type HadithBook.  Modifies the underlying ontology.
     */
    public HadithBook createHadithBook(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }

    /**
     * Gets an instance of type HadithBook with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithBook getHadithBook(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }

    /**
     * Gets all instances of HadithBook from the ontology.
     */
    public Collection<? extends HadithBook> getAllHadithBookInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithChapter
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithChapter", HadithChapter.class, DefaultHadithChapter.class);
    }

    /**
     * Creates an instance of type HadithChapter.  Modifies the underlying ontology.
     */
    public HadithChapter createHadithChapter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }

    /**
     * Gets an instance of type HadithChapter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithChapter getHadithChapter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }

    /**
     * Gets all instances of HadithChapter from the ontology.
     */
    public Collection<? extends HadithChapter> getAllHadithChapterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithCollection
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithCollection", HadithCollection.class, DefaultHadithCollection.class);
    }

    /**
     * Creates an instance of type HadithCollection.  Modifies the underlying ontology.
     */
    public HadithCollection createHadithCollection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }

    /**
     * Gets an instance of type HadithCollection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithCollection getHadithCollection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }

    /**
     * Gets all instances of HadithCollection from the ontology.
     */
    public Collection<? extends HadithCollection> getAllHadithCollectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithCollectionAuthor
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithCollectionAuthor", HadithCollectionAuthor.class, DefaultHadithCollectionAuthor.class);
    }

    /**
     * Creates an instance of type HadithCollectionAuthor.  Modifies the underlying ontology.
     */
    public HadithCollectionAuthor createHadithCollectionAuthor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTIONAUTHOR, DefaultHadithCollectionAuthor.class);
    }

    /**
     * Gets an instance of type HadithCollectionAuthor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithCollectionAuthor getHadithCollectionAuthor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTIONAUTHOR, DefaultHadithCollectionAuthor.class);
    }

    /**
     * Gets all instances of HadithCollectionAuthor from the ontology.
     */
    public Collection<? extends HadithCollectionAuthor> getAllHadithCollectionAuthorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCOLLECTIONAUTHOR, DefaultHadithCollectionAuthor.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithNarrator
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithNarrator", HadithNarrator.class, DefaultHadithNarrator.class);
    }

    /**
     * Creates an instance of type HadithNarrator.  Modifies the underlying ontology.
     */
    public HadithNarrator createHadithNarrator(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHNARRATOR, DefaultHadithNarrator.class);
    }

    /**
     * Gets an instance of type HadithNarrator with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithNarrator getHadithNarrator(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHNARRATOR, DefaultHadithNarrator.class);
    }

    /**
     * Gets all instances of HadithNarrator from the ontology.
     */
    public Collection<? extends HadithNarrator> getAllHadithNarratorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHNARRATOR, DefaultHadithNarrator.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithText
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithText", HadithText.class, DefaultHadithText.class);
    }

    /**
     * Creates an instance of type HadithText.  Modifies the underlying ontology.
     */
    public HadithText createHadithText(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHTEXT, DefaultHadithText.class);
    }

    /**
     * Gets an instance of type HadithText with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithText getHadithText(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHTEXT, DefaultHadithText.class);
    }

    /**
     * Gets all instances of HadithText from the ontology.
     */
    public Collection<? extends HadithText> getAllHadithTextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHTEXT, DefaultHadithText.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithType
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithType", HadithType.class, DefaultHadithType.class);
    }

    /**
     * Creates an instance of type HadithType.  Modifies the underlying ontology.
     */
    public HadithType createHadithType(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHTYPE, DefaultHadithType.class);
    }

    /**
     * Gets an instance of type HadithType with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithType getHadithType(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHTYPE, DefaultHadithType.class);
    }

    /**
     * Gets all instances of HadithType from the ontology.
     */
    public Collection<? extends HadithType> getAllHadithTypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHTYPE, DefaultHadithType.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#NarratorChain
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#NarratorChain", NarratorChain.class, DefaultNarratorChain.class);
    }

    /**
     * Creates an instance of type NarratorChain.  Modifies the underlying ontology.
     */
    public NarratorChain createNarratorChain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NARRATORCHAIN, DefaultNarratorChain.class);
    }

    /**
     * Gets an instance of type NarratorChain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NarratorChain getNarratorChain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NARRATORCHAIN, DefaultNarratorChain.class);
    }

    /**
     * Gets all instances of NarratorChain from the ontology.
     */
    public Collection<? extends NarratorChain> getAllNarratorChainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NARRATORCHAIN, DefaultNarratorChain.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#NarratorChainSegment
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#NarratorChainSegment", NarratorChainSegment.class, DefaultNarratorChainSegment.class);
    }

    /**
     * Creates an instance of type NarratorChainSegment.  Modifies the underlying ontology.
     */
    public NarratorChainSegment createNarratorChainSegment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NARRATORCHAINSEGMENT, DefaultNarratorChainSegment.class);
    }

    /**
     * Gets an instance of type NarratorChainSegment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NarratorChainSegment getNarratorChainSegment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NARRATORCHAINSEGMENT, DefaultNarratorChainSegment.class);
    }

    /**
     * Gets all instances of NarratorChainSegment from the ontology.
     */
    public Collection<? extends NarratorChainSegment> getAllNarratorChainSegmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NARRATORCHAINSEGMENT, DefaultNarratorChainSegment.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#RootNarrator
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#RootNarrator", RootNarrator.class, DefaultRootNarrator.class);
    }

    /**
     * Creates an instance of type RootNarrator.  Modifies the underlying ontology.
     */
    public RootNarrator createRootNarrator(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROOTNARRATOR, DefaultRootNarrator.class);
    }

    /**
     * Gets an instance of type RootNarrator with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RootNarrator getRootNarrator(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROOTNARRATOR, DefaultRootNarrator.class);
    }

    /**
     * Gets all instances of RootNarrator from the ontology.
     */
    public Collection<? extends RootNarrator> getAllRootNarratorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROOTNARRATOR, DefaultRootNarrator.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#RootNarratorChainSegment
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#RootNarratorChainSegment", RootNarratorChainSegment.class, DefaultRootNarratorChainSegment.class);
    }

    /**
     * Creates an instance of type RootNarratorChainSegment.  Modifies the underlying ontology.
     */
    public RootNarratorChainSegment createRootNarratorChainSegment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROOTNARRATORCHAINSEGMENT, DefaultRootNarratorChainSegment.class);
    }

    /**
     * Gets an instance of type RootNarratorChainSegment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RootNarratorChainSegment getRootNarratorChainSegment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROOTNARRATORCHAINSEGMENT, DefaultRootNarratorChainSegment.class);
    }

    /**
     * Gets all instances of RootNarratorChainSegment from the ontology.
     */
    public Collection<? extends RootNarratorChainSegment> getAllRootNarratorChainSegmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROOTNARRATORCHAINSEGMENT, DefaultRootNarratorChainSegment.class);
    }




    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Sacred_Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Sacred_Hadith", Sacred_Hadith.class, DefaultSacred_Hadith.class);
    }

    /**
     * Creates an instance of type Sacred_Hadith.  Modifies the underlying ontology.
     */
    public Sacred_Hadith createSacred_Hadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SACRED_HADITH, DefaultSacred_Hadith.class);
    }

    /**
     * Gets an instance of type Sacred_Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sacred_Hadith getSacred_Hadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SACRED_HADITH, DefaultSacred_Hadith.class);
    }

    /**
     * Gets all instances of Sacred_Hadith from the ontology.
     */
    public Collection<? extends Sacred_Hadith> getAllSacred_HadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SACRED_HADITH, DefaultSacred_Hadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Severed_Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Severed_Hadith", Severed_Hadith.class, DefaultSevered_Hadith.class);
    }

    /**
     * Creates an instance of type Severed_Hadith.  Modifies the underlying ontology.
     */
    public Severed_Hadith createSevered_Hadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEVERED_HADITH, DefaultSevered_Hadith.class);
    }

    /**
     * Gets an instance of type Severed_Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Severed_Hadith getSevered_Hadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEVERED_HADITH, DefaultSevered_Hadith.class);
    }

    /**
     * Gets all instances of Severed_Hadith from the ontology.
     */
    public Collection<? extends Severed_Hadith> getAllSevered_HadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEVERED_HADITH, DefaultSevered_Hadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Stopped_Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Stopped_Hadith", Stopped_Hadith.class, DefaultStopped_Hadith.class);
    }

    /**
     * Creates an instance of type Stopped_Hadith.  Modifies the underlying ontology.
     */
    public Stopped_Hadith createStopped_Hadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STOPPED_HADITH, DefaultStopped_Hadith.class);
    }

    /**
     * Gets an instance of type Stopped_Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Stopped_Hadith getStopped_Hadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STOPPED_HADITH, DefaultStopped_Hadith.class);
    }

    /**
     * Gets all instances of Stopped_Hadith from the ontology.
     */
    public Collection<? extends Stopped_Hadith> getAllStopped_HadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STOPPED_HADITH, DefaultStopped_Hadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Verse
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Verse", Verse.class, DefaultVerse.class);
    }

    /**
     * Creates an instance of type Verse.  Modifies the underlying ontology.
     */
    public Verse createVerse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets an instance of type Verse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Verse getVerse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets all instances of Verse from the ontology.
     */
    public Collection<? extends Verse> getAllVerseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }


}
